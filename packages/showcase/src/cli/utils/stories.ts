import { globby } from "globby";
import handlebars from "handlebars";

import { getShowcaseConfig } from "./utils.js";

interface StoryPathsObject {
  [storyId: string]: {
    path: string;
  };
}

export const getStoryComponentPaths = async (): Promise<StoryPathsObject> => {
  const config = await getShowcaseConfig();
  const paths = await globby(
    config?.stories || ["src/**/*.stories.{js,jsx,ts,tsx}"],
  );
  let pathsObject: StoryPathsObject = {};
  paths.forEach((path) => {
    const id = path.split("/").slice(-1)[0].split(".")[0];
    if (pathsObject[id]) {
      throw new Error(`Duplicate story file name found: ${path}`);
    }
    pathsObject[id] = { path: path };
  });
  return pathsObject;
};

export const createCompileTarget = (storyPaths: StoryPathsObject) => {
  const imports = Object.keys(storyPaths).map((componentName) => ({
    name: componentName,
    path: `@/${storyPaths[componentName].path}`,
  }));
  const componentNames = Object.keys(storyPaths).map((storyId) => storyId);
  const template = `// the following is auto-generated by showcase.js
{{#each imports}}
import * as {{ this.name }} from "{{ this.path }}";
{{/each}}
export const stories = { {{ componentNames }} };`;
  const compiler = handlebars.compile(template);
  const compiled = compiler({
    timestamp: new Date().toISOString(),
    imports,
    componentNames,
  });
  return compiled;
};
